import base64
import json

from Crypto.Cipher import DES3
from Crypto.Util.Padding import unpad

# 密钥（必须是 16 或 24 字节）
key = b"55d9MgHGzoQHvev7xzuQvDuW"  # 或
# iv = b"20241231"  # 如果不足 8 字节，可以填充或截断
iv = b"20250206"  # 如果不足 8 字节，可以填充或截断

encrypted_base64 = "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"

# 解密
encrypted_data = base64.b64decode(encrypted_base64)
cipher_decrypt = DES3.new(key, DES3.MODE_CBC, iv)
decrypted_data = cipher_decrypt.decrypt(encrypted_data)
plaintext = unpad(decrypted_data, DES3.block_size).decode("utf-8")
json_object = json.loads(plaintext)

print(json_object)
# print(json_object["queryResult"])
# b"24-byte-key-123456789012"

# 固定偏移量（IV，必须是 8 字节）print("Decrypted:", json_object)